// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package ml

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	domain "try-on/internal/pkg/domain"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonD1312a8fDecodeTryOnInternalPkgMl(in *jlexer.Lexer, out *processingResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.UserID).UnmarshalText(data))
			}
		case "clothes_id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.ClothesID).UnmarshalText(data))
			}
		case "result_dir":
			out.ResultDir = string(in.String())
		case "classification":
			(out.Classification).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD1312a8fEncodeTryOnInternalPkgMl(out *jwriter.Writer, in processingResult) {
	out.RawByte('{')
	first := true
	_ = first
	if (in.UserID).IsDefined() {
		const prefix string = ",\"user_id\":"
		first = false
		out.RawString(prefix[1:])
		out.RawText((in.UserID).MarshalText())
	}
	if (in.ClothesID).IsDefined() {
		const prefix string = ",\"clothes_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.RawText((in.ClothesID).MarshalText())
	}
	if in.ResultDir != "" {
		const prefix string = ",\"result_dir\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ResultDir))
	}
	if true {
		const prefix string = ",\"classification\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Classification).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v processingResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD1312a8fEncodeTryOnInternalPkgMl(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v processingResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD1312a8fEncodeTryOnInternalPkgMl(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *processingResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD1312a8fDecodeTryOnInternalPkgMl(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *processingResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD1312a8fDecodeTryOnInternalPkgMl(l, v)
}
func easyjsonD1312a8fDecodeTryOnInternalPkgMl1(in *jlexer.Lexer, out *classificationModelResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "tags":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Tags = make(map[string]float32)
				} else {
					out.Tags = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 float32
					v1 = float32(in.Float32())
					(out.Tags)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		case "categories":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Categories = make(map[string]float32)
				} else {
					out.Categories = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v2 float32
					v2 = float32(in.Float32())
					(out.Categories)[key] = v2
					in.WantComma()
				}
				in.Delim('}')
			}
		case "subcategories":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Subcategories = make(map[string]float32)
				} else {
					out.Subcategories = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v3 float32
					v3 = float32(in.Float32())
					(out.Subcategories)[key] = v3
					in.WantComma()
				}
				in.Delim('}')
			}
		case "seasons":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Seasons = make(map[domain.Season]float32)
				} else {
					out.Seasons = nil
				}
				for !in.IsDelim('}') {
					key := domain.Season(in.String())
					in.WantColon()
					var v4 float32
					v4 = float32(in.Float32())
					(out.Seasons)[key] = v4
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD1312a8fEncodeTryOnInternalPkgMl1(out *jwriter.Writer, in classificationModelResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Tags) != 0 {
		const prefix string = ",\"tags\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('{')
			v5First := true
			for v5Name, v5Value := range in.Tags {
				if v5First {
					v5First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v5Name))
				out.RawByte(':')
				out.Float32(float32(v5Value))
			}
			out.RawByte('}')
		}
	}
	if len(in.Categories) != 0 {
		const prefix string = ",\"categories\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v6First := true
			for v6Name, v6Value := range in.Categories {
				if v6First {
					v6First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v6Name))
				out.RawByte(':')
				out.Float32(float32(v6Value))
			}
			out.RawByte('}')
		}
	}
	if len(in.Subcategories) != 0 {
		const prefix string = ",\"subcategories\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v7First := true
			for v7Name, v7Value := range in.Subcategories {
				if v7First {
					v7First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v7Name))
				out.RawByte(':')
				out.Float32(float32(v7Value))
			}
			out.RawByte('}')
		}
	}
	if len(in.Seasons) != 0 {
		const prefix string = ",\"seasons\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v8First := true
			for v8Name, v8Value := range in.Seasons {
				if v8First {
					v8First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v8Name))
				out.RawByte(':')
				out.Float32(float32(v8Value))
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v classificationModelResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD1312a8fEncodeTryOnInternalPkgMl1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v classificationModelResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD1312a8fEncodeTryOnInternalPkgMl1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *classificationModelResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD1312a8fDecodeTryOnInternalPkgMl1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *classificationModelResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD1312a8fDecodeTryOnInternalPkgMl1(l, v)
}
