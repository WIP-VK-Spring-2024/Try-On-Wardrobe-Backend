// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package domain

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	utils "try-on/internal/pkg/utils"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson3e1fa5ecDecodeTryOnInternalPkgDomain(in *jlexer.Lexer, out *Weather) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "temp_c":
			out.Temp = float32(in.Float32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeTryOnInternalPkgDomain(out *jwriter.Writer, in Weather) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Temp != 0 {
		const prefix string = ",\"temp_c\":"
		first = false
		out.RawString(prefix[1:])
		out.Float32(float32(in.Temp))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Weather) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeTryOnInternalPkgDomain(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Weather) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeTryOnInternalPkgDomain(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Weather) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeTryOnInternalPkgDomain(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Weather) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeTryOnInternalPkgDomain(l, v)
}
func easyjson3e1fa5ecDecodeTryOnInternalPkgDomain1(in *jlexer.Lexer, out *UserImage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.UserID).UnmarshalText(data))
			}
		case "image":
			out.Image = string(in.String())
		case "uuid":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.ID).UnmarshalText(data))
			}
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "updated_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeTryOnInternalPkgDomain1(out *jwriter.Writer, in UserImage) {
	out.RawByte('{')
	first := true
	_ = first
	if (in.UserID).IsDefined() {
		const prefix string = ",\"user_id\":"
		first = false
		out.RawString(prefix[1:])
		out.RawText((in.UserID).MarshalText())
	}
	if in.Image != "" {
		const prefix string = ",\"image\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Image))
	}
	if (in.ID).IsDefined() {
		const prefix string = ",\"uuid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.RawText((in.ID).MarshalText())
	}
	if (in.CreatedAt).IsDefined() {
		const prefix string = ",\"created_at\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	if (in.UpdatedAt).IsDefined() {
		const prefix string = ",\"updated_at\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserImage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeTryOnInternalPkgDomain1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserImage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeTryOnInternalPkgDomain1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserImage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeTryOnInternalPkgDomain1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserImage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeTryOnInternalPkgDomain1(l, v)
}
func easyjson3e1fa5ecDecodeTryOnInternalPkgDomain2(in *jlexer.Lexer, out *Type) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "tryonable":
			out.Tryonable = bool(in.Bool())
		case "subtypes":
			if in.IsNull() {
				in.Skip()
				out.Subtypes = nil
			} else {
				in.Delim('[')
				if out.Subtypes == nil {
					if !in.IsDelim(']') {
						out.Subtypes = make([]Subtype, 0, 0)
					} else {
						out.Subtypes = []Subtype{}
					}
				} else {
					out.Subtypes = (out.Subtypes)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Subtype
					(v1).UnmarshalEasyJSON(in)
					out.Subtypes = append(out.Subtypes, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "uuid":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.ID).UnmarshalText(data))
			}
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "updated_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeTryOnInternalPkgDomain2(out *jwriter.Writer, in Type) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"tryonable\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Tryonable))
	}
	if len(in.Subtypes) != 0 {
		const prefix string = ",\"subtypes\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v2, v3 := range in.Subtypes {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if (in.ID).IsDefined() {
		const prefix string = ",\"uuid\":"
		out.RawString(prefix)
		out.RawText((in.ID).MarshalText())
	}
	if (in.CreatedAt).IsDefined() {
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	if (in.UpdatedAt).IsDefined() {
		const prefix string = ",\"updated_at\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Type) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeTryOnInternalPkgDomain2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Type) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeTryOnInternalPkgDomain2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Type) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeTryOnInternalPkgDomain2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Type) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeTryOnInternalPkgDomain2(l, v)
}
func easyjson3e1fa5ecDecodeTryOnInternalPkgDomain3(in *jlexer.Lexer, out *TryOnResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "image":
			out.Image = string(in.String())
		case "rating":
			out.Rating = int(in.Int())
		case "user_image_id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.UserImageID).UnmarshalText(data))
			}
		case "clothes_id":
			if in.IsNull() {
				in.Skip()
				out.ClothesID = nil
			} else {
				in.Delim('[')
				if out.ClothesID == nil {
					if !in.IsDelim(']') {
						out.ClothesID = make([]utils.UUID, 0, 4)
					} else {
						out.ClothesID = []utils.UUID{}
					}
				} else {
					out.ClothesID = (out.ClothesID)[:0]
				}
				for !in.IsDelim(']') {
					var v4 utils.UUID
					if data := in.UnsafeBytes(); in.Ok() {
						in.AddError((v4).UnmarshalText(data))
					}
					out.ClothesID = append(out.ClothesID, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "uuid":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.ID).UnmarshalText(data))
			}
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "updated_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeTryOnInternalPkgDomain3(out *jwriter.Writer, in TryOnResult) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Image != "" {
		const prefix string = ",\"image\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Image))
	}
	{
		const prefix string = ",\"rating\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Rating))
	}
	if (in.UserImageID).IsDefined() {
		const prefix string = ",\"user_image_id\":"
		out.RawString(prefix)
		out.RawText((in.UserImageID).MarshalText())
	}
	if len(in.ClothesID) != 0 {
		const prefix string = ",\"clothes_id\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v5, v6 := range in.ClothesID {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.RawText((v6).MarshalText())
			}
			out.RawByte(']')
		}
	}
	if (in.ID).IsDefined() {
		const prefix string = ",\"uuid\":"
		out.RawString(prefix)
		out.RawText((in.ID).MarshalText())
	}
	if (in.CreatedAt).IsDefined() {
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	if (in.UpdatedAt).IsDefined() {
		const prefix string = ",\"updated_at\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TryOnResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeTryOnInternalPkgDomain3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TryOnResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeTryOnInternalPkgDomain3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TryOnResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeTryOnInternalPkgDomain3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TryOnResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeTryOnInternalPkgDomain3(l, v)
}
func easyjson3e1fa5ecDecodeTryOnInternalPkgDomain4(in *jlexer.Lexer, out *TryOnResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.UserID).UnmarshalText(data))
			}
		case "clothes":
			if in.IsNull() {
				in.Skip()
				out.Clothes = nil
			} else {
				in.Delim('[')
				if out.Clothes == nil {
					if !in.IsDelim(']') {
						out.Clothes = make([]TryOnClothesInfo, 0, 2)
					} else {
						out.Clothes = []TryOnClothesInfo{}
					}
				} else {
					out.Clothes = (out.Clothes)[:0]
				}
				for !in.IsDelim(']') {
					var v7 TryOnClothesInfo
					(v7).UnmarshalEasyJSON(in)
					out.Clothes = append(out.Clothes, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "user_image_id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.UserImageID).UnmarshalText(data))
			}
		case "try_on_id":
			out.TryOnID = string(in.String())
		case "try_on_dir":
			out.TryOnDir = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeTryOnInternalPkgDomain4(out *jwriter.Writer, in TryOnResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if (in.UserID).IsDefined() {
		const prefix string = ",\"user_id\":"
		first = false
		out.RawString(prefix[1:])
		out.RawText((in.UserID).MarshalText())
	}
	if len(in.Clothes) != 0 {
		const prefix string = ",\"clothes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v8, v9 := range in.Clothes {
				if v8 > 0 {
					out.RawByte(',')
				}
				(v9).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if (in.UserImageID).IsDefined() {
		const prefix string = ",\"user_image_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.RawText((in.UserImageID).MarshalText())
	}
	if in.TryOnID != "" {
		const prefix string = ",\"try_on_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TryOnID))
	}
	if in.TryOnDir != "" {
		const prefix string = ",\"try_on_dir\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TryOnDir))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TryOnResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeTryOnInternalPkgDomain4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TryOnResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeTryOnInternalPkgDomain4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TryOnResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeTryOnInternalPkgDomain4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TryOnResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeTryOnInternalPkgDomain4(l, v)
}
func easyjson3e1fa5ecDecodeTryOnInternalPkgDomain5(in *jlexer.Lexer, out *TryOnRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "clothes":
			if in.IsNull() {
				in.Skip()
				out.Clothes = nil
			} else {
				in.Delim('[')
				if out.Clothes == nil {
					if !in.IsDelim(']') {
						out.Clothes = make([]TryOnClothesInfo, 0, 2)
					} else {
						out.Clothes = []TryOnClothesInfo{}
					}
				} else {
					out.Clothes = (out.Clothes)[:0]
				}
				for !in.IsDelim(']') {
					var v10 TryOnClothesInfo
					(v10).UnmarshalEasyJSON(in)
					out.Clothes = append(out.Clothes, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "user_id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.UserID).UnmarshalText(data))
			}
		case "user_image_id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.UserImageID).UnmarshalText(data))
			}
		case "user_image_dir":
			out.UserImageDir = string(in.String())
		case "clothes_dir":
			out.ClothesDir = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeTryOnInternalPkgDomain5(out *jwriter.Writer, in TryOnRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Clothes) != 0 {
		const prefix string = ",\"clothes\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v11, v12 := range in.Clothes {
				if v11 > 0 {
					out.RawByte(',')
				}
				(v12).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if (in.UserID).IsDefined() {
		const prefix string = ",\"user_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.RawText((in.UserID).MarshalText())
	}
	if (in.UserImageID).IsDefined() {
		const prefix string = ",\"user_image_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.RawText((in.UserImageID).MarshalText())
	}
	if in.UserImageDir != "" {
		const prefix string = ",\"user_image_dir\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UserImageDir))
	}
	if in.ClothesDir != "" {
		const prefix string = ",\"clothes_dir\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ClothesDir))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TryOnRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeTryOnInternalPkgDomain5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TryOnRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeTryOnInternalPkgDomain5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TryOnRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeTryOnInternalPkgDomain5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TryOnRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeTryOnInternalPkgDomain5(l, v)
}
func easyjson3e1fa5ecDecodeTryOnInternalPkgDomain6(in *jlexer.Lexer, out *TryOnOpts) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.UserID).UnmarshalText(data))
			}
		case "user_image_id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.UserImageID).UnmarshalText(data))
			}
		case "user_image_dir":
			out.UserImageDir = string(in.String())
		case "clothes_dir":
			out.ClothesDir = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeTryOnInternalPkgDomain6(out *jwriter.Writer, in TryOnOpts) {
	out.RawByte('{')
	first := true
	_ = first
	if (in.UserID).IsDefined() {
		const prefix string = ",\"user_id\":"
		first = false
		out.RawString(prefix[1:])
		out.RawText((in.UserID).MarshalText())
	}
	if (in.UserImageID).IsDefined() {
		const prefix string = ",\"user_image_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.RawText((in.UserImageID).MarshalText())
	}
	if in.UserImageDir != "" {
		const prefix string = ",\"user_image_dir\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UserImageDir))
	}
	if in.ClothesDir != "" {
		const prefix string = ",\"clothes_dir\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ClothesDir))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TryOnOpts) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeTryOnInternalPkgDomain6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TryOnOpts) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeTryOnInternalPkgDomain6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TryOnOpts) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeTryOnInternalPkgDomain6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TryOnOpts) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeTryOnInternalPkgDomain6(l, v)
}
func easyjson3e1fa5ecDecodeTryOnInternalPkgDomain7(in *jlexer.Lexer, out *TryOnClothesInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "clothes_id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.ClothesID).UnmarshalText(data))
			}
		case "category":
			out.Category = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeTryOnInternalPkgDomain7(out *jwriter.Writer, in TryOnClothesInfo) {
	out.RawByte('{')
	first := true
	_ = first
	if (in.ClothesID).IsDefined() {
		const prefix string = ",\"clothes_id\":"
		first = false
		out.RawString(prefix[1:])
		out.RawText((in.ClothesID).MarshalText())
	}
	if in.Category != "" {
		const prefix string = ",\"category\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Category))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TryOnClothesInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeTryOnInternalPkgDomain7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TryOnClothesInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeTryOnInternalPkgDomain7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TryOnClothesInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeTryOnInternalPkgDomain7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TryOnClothesInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeTryOnInternalPkgDomain7(l, v)
}
func easyjson3e1fa5ecDecodeTryOnInternalPkgDomain8(in *jlexer.Lexer, out *TransformMap) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
	} else {
		in.Delim('{')
		if !in.IsDelim('}') {
			*out = make(TransformMap)
		} else {
			*out = nil
		}
		for !in.IsDelim('}') {
			var key utils.UUID
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError(key.UnmarshalText(data))
			}
			in.WantColon()
			var v13 Transform
			(v13).UnmarshalEasyJSON(in)
			(*out)[key] = v13
			in.WantComma()
		}
		in.Delim('}')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeTryOnInternalPkgDomain8(out *jwriter.Writer, in TransformMap) {
	if in == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
		out.RawString(`null`)
	} else {
		out.RawByte('{')
		v14First := true
		for v14Name, v14Value := range in {
			if v14First {
				v14First = false
			} else {
				out.RawByte(',')
			}
			out.RawText((v14Name).MarshalText())
			out.RawByte(':')
			(v14Value).MarshalEasyJSON(out)
		}
		out.RawByte('}')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v TransformMap) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeTryOnInternalPkgDomain8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TransformMap) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeTryOnInternalPkgDomain8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TransformMap) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeTryOnInternalPkgDomain8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TransformMap) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeTryOnInternalPkgDomain8(l, v)
}
func easyjson3e1fa5ecDecodeTryOnInternalPkgDomain9(in *jlexer.Lexer, out *Transform) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "x":
			out.X = float32(in.Float32())
		case "y":
			out.Y = float32(in.Float32())
		case "width":
			out.Width = float32(in.Float32())
		case "height":
			out.Height = float32(in.Float32())
		case "angle":
			out.Angle = float32(in.Float32())
		case "scale":
			out.Scale = float32(in.Float32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeTryOnInternalPkgDomain9(out *jwriter.Writer, in Transform) {
	out.RawByte('{')
	first := true
	_ = first
	if in.X != 0 {
		const prefix string = ",\"x\":"
		first = false
		out.RawString(prefix[1:])
		out.Float32(float32(in.X))
	}
	if in.Y != 0 {
		const prefix string = ",\"y\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Y))
	}
	if in.Width != 0 {
		const prefix string = ",\"width\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Width))
	}
	if in.Height != 0 {
		const prefix string = ",\"height\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Height))
	}
	if in.Angle != 0 {
		const prefix string = ",\"angle\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Angle))
	}
	if in.Scale != 0 {
		const prefix string = ",\"scale\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Scale))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Transform) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeTryOnInternalPkgDomain9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Transform) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeTryOnInternalPkgDomain9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Transform) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeTryOnInternalPkgDomain9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Transform) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeTryOnInternalPkgDomain9(l, v)
}
func easyjson3e1fa5ecDecodeTryOnInternalPkgDomain10(in *jlexer.Lexer, out *Tag) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "use_count":
			out.UseCount = int32(in.Int32())
		case "uuid":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.ID).UnmarshalText(data))
			}
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "updated_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeTryOnInternalPkgDomain10(out *jwriter.Writer, in Tag) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.UseCount != 0 {
		const prefix string = ",\"use_count\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.UseCount))
	}
	if (in.ID).IsDefined() {
		const prefix string = ",\"uuid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.RawText((in.ID).MarshalText())
	}
	if (in.CreatedAt).IsDefined() {
		const prefix string = ",\"created_at\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	if (in.UpdatedAt).IsDefined() {
		const prefix string = ",\"updated_at\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Tag) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeTryOnInternalPkgDomain10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Tag) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeTryOnInternalPkgDomain10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Tag) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeTryOnInternalPkgDomain10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Tag) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeTryOnInternalPkgDomain10(l, v)
}
func easyjson3e1fa5ecDecodeTryOnInternalPkgDomain11(in *jlexer.Lexer, out *Subtype) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "type_id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.TypeID).UnmarshalText(data))
			}
		case "uuid":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.ID).UnmarshalText(data))
			}
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "updated_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeTryOnInternalPkgDomain11(out *jwriter.Writer, in Subtype) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if (in.TypeID).IsDefined() {
		const prefix string = ",\"type_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.RawText((in.TypeID).MarshalText())
	}
	if (in.ID).IsDefined() {
		const prefix string = ",\"uuid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.RawText((in.ID).MarshalText())
	}
	if (in.CreatedAt).IsDefined() {
		const prefix string = ",\"created_at\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	if (in.UpdatedAt).IsDefined() {
		const prefix string = ",\"updated_at\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Subtype) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeTryOnInternalPkgDomain11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Subtype) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeTryOnInternalPkgDomain11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Subtype) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeTryOnInternalPkgDomain11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Subtype) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeTryOnInternalPkgDomain11(l, v)
}
func easyjson3e1fa5ecDecodeTryOnInternalPkgDomain12(in *jlexer.Lexer, out *Style) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "uuid":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.ID).UnmarshalText(data))
			}
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "updated_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeTryOnInternalPkgDomain12(out *jwriter.Writer, in Style) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if (in.ID).IsDefined() {
		const prefix string = ",\"uuid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.RawText((in.ID).MarshalText())
	}
	if (in.CreatedAt).IsDefined() {
		const prefix string = ",\"created_at\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	if (in.UpdatedAt).IsDefined() {
		const prefix string = ",\"updated_at\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Style) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeTryOnInternalPkgDomain12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Style) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeTryOnInternalPkgDomain12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Style) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeTryOnInternalPkgDomain12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Style) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeTryOnInternalPkgDomain12(l, v)
}
func easyjson3e1fa5ecDecodeTryOnInternalPkgDomain13(in *jlexer.Lexer, out *OutfitGenerationResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.UserID).UnmarshalText(data))
			}
		case "clothes":
			if in.IsNull() {
				in.Skip()
				out.Clothes = nil
			} else {
				in.Delim('[')
				if out.Clothes == nil {
					if !in.IsDelim(']') {
						out.Clothes = make([]utils.UUID, 0, 4)
					} else {
						out.Clothes = []utils.UUID{}
					}
				} else {
					out.Clothes = (out.Clothes)[:0]
				}
				for !in.IsDelim(']') {
					var v15 utils.UUID
					if data := in.UnsafeBytes(); in.Ok() {
						in.AddError((v15).UnmarshalText(data))
					}
					out.Clothes = append(out.Clothes, v15)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeTryOnInternalPkgDomain13(out *jwriter.Writer, in OutfitGenerationResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if (in.UserID).IsDefined() {
		const prefix string = ",\"user_id\":"
		first = false
		out.RawString(prefix[1:])
		out.RawText((in.UserID).MarshalText())
	}
	if len(in.Clothes) != 0 {
		const prefix string = ",\"clothes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v16, v17 := range in.Clothes {
				if v16 > 0 {
					out.RawByte(',')
				}
				out.RawText((v17).MarshalText())
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OutfitGenerationResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeTryOnInternalPkgDomain13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OutfitGenerationResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeTryOnInternalPkgDomain13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OutfitGenerationResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeTryOnInternalPkgDomain13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OutfitGenerationResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeTryOnInternalPkgDomain13(l, v)
}
func easyjson3e1fa5ecDecodeTryOnInternalPkgDomain14(in *jlexer.Lexer, out *OutfitGenerationRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.UserID).UnmarshalText(data))
			}
		case "pos":
			(out.Pos).UnmarshalEasyJSON(in)
		case "tags":
			if in.IsNull() {
				in.Skip()
				out.Tags = nil
			} else {
				in.Delim('[')
				if out.Tags == nil {
					if !in.IsDelim(']') {
						out.Tags = make([]string, 0, 4)
					} else {
						out.Tags = []string{}
					}
				} else {
					out.Tags = (out.Tags)[:0]
				}
				for !in.IsDelim(']') {
					var v18 string
					v18 = string(in.String())
					out.Tags = append(out.Tags, v18)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "prompt":
			out.Prompt = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeTryOnInternalPkgDomain14(out *jwriter.Writer, in OutfitGenerationRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if (in.UserID).IsDefined() {
		const prefix string = ",\"user_id\":"
		first = false
		out.RawString(prefix[1:])
		out.RawText((in.UserID).MarshalText())
	}
	if true {
		const prefix string = ",\"pos\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Pos).MarshalEasyJSON(out)
	}
	if len(in.Tags) != 0 {
		const prefix string = ",\"tags\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v19, v20 := range in.Tags {
				if v19 > 0 {
					out.RawByte(',')
				}
				out.String(string(v20))
			}
			out.RawByte(']')
		}
	}
	if in.Prompt != "" {
		const prefix string = ",\"prompt\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Prompt))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OutfitGenerationRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeTryOnInternalPkgDomain14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OutfitGenerationRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeTryOnInternalPkgDomain14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OutfitGenerationRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeTryOnInternalPkgDomain14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OutfitGenerationRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeTryOnInternalPkgDomain14(l, v)
}
func easyjson3e1fa5ecDecodeTryOnInternalPkgDomain15(in *jlexer.Lexer, out *OutfitGenerationModelRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.UserID).UnmarshalText(data))
			}
		case "clothes":
			if in.IsNull() {
				in.Skip()
				out.Clothes = nil
			} else {
				in.Delim('[')
				if out.Clothes == nil {
					if !in.IsDelim(']') {
						out.Clothes = make([]GenClothesInfo, 0, 2)
					} else {
						out.Clothes = []GenClothesInfo{}
					}
				} else {
					out.Clothes = (out.Clothes)[:0]
				}
				for !in.IsDelim(']') {
					var v21 GenClothesInfo
					(v21).UnmarshalEasyJSON(in)
					out.Clothes = append(out.Clothes, v21)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "prompt":
			out.Prompt = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeTryOnInternalPkgDomain15(out *jwriter.Writer, in OutfitGenerationModelRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if (in.UserID).IsDefined() {
		const prefix string = ",\"user_id\":"
		first = false
		out.RawString(prefix[1:])
		out.RawText((in.UserID).MarshalText())
	}
	if len(in.Clothes) != 0 {
		const prefix string = ",\"clothes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v22, v23 := range in.Clothes {
				if v22 > 0 {
					out.RawByte(',')
				}
				(v23).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.Prompt != "" {
		const prefix string = ",\"prompt\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Prompt))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OutfitGenerationModelRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeTryOnInternalPkgDomain15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OutfitGenerationModelRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeTryOnInternalPkgDomain15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OutfitGenerationModelRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeTryOnInternalPkgDomain15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OutfitGenerationModelRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeTryOnInternalPkgDomain15(l, v)
}
func easyjson3e1fa5ecDecodeTryOnInternalPkgDomain16(in *jlexer.Lexer, out *Outfit) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.UserID).UnmarshalText(data))
			}
		case "style_id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.StyleID).UnmarshalText(data))
			}
		case "privacy":
			out.Privacy = Privacy(in.String())
		case "name":
			out.Name = string(in.String())
		case "note":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.Note).UnmarshalText(data))
			}
		case "image":
			out.Image = string(in.String())
		case "transforms":
			(out.Transforms).UnmarshalEasyJSON(in)
		case "seasons":
			if in.IsNull() {
				in.Skip()
				out.Seasons = nil
			} else {
				in.Delim('[')
				if out.Seasons == nil {
					if !in.IsDelim(']') {
						out.Seasons = make([]Season, 0, 4)
					} else {
						out.Seasons = []Season{}
					}
				} else {
					out.Seasons = (out.Seasons)[:0]
				}
				for !in.IsDelim(']') {
					var v24 Season
					v24 = Season(in.String())
					out.Seasons = append(out.Seasons, v24)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "tags":
			if in.IsNull() {
				in.Skip()
				out.Tags = nil
			} else {
				in.Delim('[')
				if out.Tags == nil {
					if !in.IsDelim(']') {
						out.Tags = make([]string, 0, 4)
					} else {
						out.Tags = []string{}
					}
				} else {
					out.Tags = (out.Tags)[:0]
				}
				for !in.IsDelim(']') {
					var v25 string
					v25 = string(in.String())
					out.Tags = append(out.Tags, v25)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "uuid":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.ID).UnmarshalText(data))
			}
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "updated_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeTryOnInternalPkgDomain16(out *jwriter.Writer, in Outfit) {
	out.RawByte('{')
	first := true
	_ = first
	if (in.UserID).IsDefined() {
		const prefix string = ",\"user_id\":"
		first = false
		out.RawString(prefix[1:])
		out.RawText((in.UserID).MarshalText())
	}
	if (in.StyleID).IsDefined() {
		const prefix string = ",\"style_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.RawText((in.StyleID).MarshalText())
	}
	if in.Privacy != "" {
		const prefix string = ",\"privacy\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Privacy))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if (in.Note).IsDefined() {
		const prefix string = ",\"note\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Note).MarshalEasyJSON(out)
	}
	if in.Image != "" {
		const prefix string = ",\"image\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Image))
	}
	if len(in.Transforms) != 0 {
		const prefix string = ",\"transforms\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Transforms).MarshalEasyJSON(out)
	}
	if len(in.Seasons) != 0 {
		const prefix string = ",\"seasons\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v26, v27 := range in.Seasons {
				if v26 > 0 {
					out.RawByte(',')
				}
				out.String(string(v27))
			}
			out.RawByte(']')
		}
	}
	if len(in.Tags) != 0 {
		const prefix string = ",\"tags\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v28, v29 := range in.Tags {
				if v28 > 0 {
					out.RawByte(',')
				}
				out.String(string(v29))
			}
			out.RawByte(']')
		}
	}
	if (in.ID).IsDefined() {
		const prefix string = ",\"uuid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.RawText((in.ID).MarshalText())
	}
	if (in.CreatedAt).IsDefined() {
		const prefix string = ",\"created_at\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	if (in.UpdatedAt).IsDefined() {
		const prefix string = ",\"updated_at\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Outfit) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeTryOnInternalPkgDomain16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Outfit) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeTryOnInternalPkgDomain16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Outfit) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeTryOnInternalPkgDomain16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Outfit) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeTryOnInternalPkgDomain16(l, v)
}
func easyjson3e1fa5ecDecodeTryOnInternalPkgDomain17(in *jlexer.Lexer, out *GeoPosition) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "lat":
			out.Lat = float32(in.Float32())
		case "lon":
			out.Lon = float32(in.Float32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeTryOnInternalPkgDomain17(out *jwriter.Writer, in GeoPosition) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Lat != 0 {
		const prefix string = ",\"lat\":"
		first = false
		out.RawString(prefix[1:])
		out.Float32(float32(in.Lat))
	}
	if in.Lon != 0 {
		const prefix string = ",\"lon\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Lon))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GeoPosition) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeTryOnInternalPkgDomain17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GeoPosition) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeTryOnInternalPkgDomain17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GeoPosition) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeTryOnInternalPkgDomain17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GeoPosition) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeTryOnInternalPkgDomain17(l, v)
}
func easyjson3e1fa5ecDecodeTryOnInternalPkgDomain18(in *jlexer.Lexer, out *GenClothesInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "clothes_id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.ClothesID).UnmarshalText(data))
			}
		case "category":
			out.Category = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeTryOnInternalPkgDomain18(out *jwriter.Writer, in GenClothesInfo) {
	out.RawByte('{')
	first := true
	_ = first
	if (in.ClothesID).IsDefined() {
		const prefix string = ",\"clothes_id\":"
		first = false
		out.RawString(prefix[1:])
		out.RawText((in.ClothesID).MarshalText())
	}
	if in.Category != "" {
		const prefix string = ",\"category\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Category))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GenClothesInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeTryOnInternalPkgDomain18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GenClothesInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeTryOnInternalPkgDomain18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GenClothesInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeTryOnInternalPkgDomain18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GenClothesInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeTryOnInternalPkgDomain18(l, v)
}
func easyjson3e1fa5ecDecodeTryOnInternalPkgDomain19(in *jlexer.Lexer, out *Credentials) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "password":
			out.Password = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeTryOnInternalPkgDomain19(out *jwriter.Writer, in Credentials) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.Password != "" {
		const prefix string = ",\"password\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Password))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Credentials) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeTryOnInternalPkgDomain19(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Credentials) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeTryOnInternalPkgDomain19(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Credentials) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeTryOnInternalPkgDomain19(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Credentials) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeTryOnInternalPkgDomain19(l, v)
}
func easyjson3e1fa5ecDecodeTryOnInternalPkgDomain20(in *jlexer.Lexer, out *ClothesProcessingResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.UserID).UnmarshalText(data))
			}
		case "clothes_id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.ClothesID).UnmarshalText(data))
			}
		case "clothes_dir":
			out.ClothesDir = string(in.String())
		case "tryonable":
			out.Tryonable = bool(in.Bool())
		case "classification":
			(out.Classification).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeTryOnInternalPkgDomain20(out *jwriter.Writer, in ClothesProcessingResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if (in.UserID).IsDefined() {
		const prefix string = ",\"user_id\":"
		first = false
		out.RawString(prefix[1:])
		out.RawText((in.UserID).MarshalText())
	}
	if (in.ClothesID).IsDefined() {
		const prefix string = ",\"clothes_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.RawText((in.ClothesID).MarshalText())
	}
	if in.ClothesDir != "" {
		const prefix string = ",\"clothes_dir\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ClothesDir))
	}
	if in.Tryonable {
		const prefix string = ",\"tryonable\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Tryonable))
	}
	if true {
		const prefix string = ",\"classification\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Classification).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ClothesProcessingResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeTryOnInternalPkgDomain20(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ClothesProcessingResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeTryOnInternalPkgDomain20(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ClothesProcessingResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeTryOnInternalPkgDomain20(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ClothesProcessingResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeTryOnInternalPkgDomain20(l, v)
}
func easyjson3e1fa5ecDecodeTryOnInternalPkgDomain21(in *jlexer.Lexer, out *ClothesProcessingRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.UserID).UnmarshalText(data))
			}
		case "clothes_id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.ClothesID).UnmarshalText(data))
			}
		case "clothes_dir":
			out.ClothesDir = string(in.String())
		case "classification":
			(out.Classification).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeTryOnInternalPkgDomain21(out *jwriter.Writer, in ClothesProcessingRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if (in.UserID).IsDefined() {
		const prefix string = ",\"user_id\":"
		first = false
		out.RawString(prefix[1:])
		out.RawText((in.UserID).MarshalText())
	}
	if (in.ClothesID).IsDefined() {
		const prefix string = ",\"clothes_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.RawText((in.ClothesID).MarshalText())
	}
	if in.ClothesDir != "" {
		const prefix string = ",\"clothes_dir\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ClothesDir))
	}
	if true {
		const prefix string = ",\"classification\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Classification).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ClothesProcessingRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeTryOnInternalPkgDomain21(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ClothesProcessingRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeTryOnInternalPkgDomain21(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ClothesProcessingRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeTryOnInternalPkgDomain21(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ClothesProcessingRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeTryOnInternalPkgDomain21(l, v)
}
func easyjson3e1fa5ecDecodeTryOnInternalPkgDomain22(in *jlexer.Lexer, out *ClothesProcessingModelResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.UserID).UnmarshalText(data))
			}
		case "clothes_id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.ClothesID).UnmarshalText(data))
			}
		case "clothes_dir":
			out.ClothesDir = string(in.String())
		case "classification":
			(out.Classification).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeTryOnInternalPkgDomain22(out *jwriter.Writer, in ClothesProcessingModelResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if (in.UserID).IsDefined() {
		const prefix string = ",\"user_id\":"
		first = false
		out.RawString(prefix[1:])
		out.RawText((in.UserID).MarshalText())
	}
	if (in.ClothesID).IsDefined() {
		const prefix string = ",\"clothes_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.RawText((in.ClothesID).MarshalText())
	}
	if in.ClothesDir != "" {
		const prefix string = ",\"clothes_dir\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ClothesDir))
	}
	if true {
		const prefix string = ",\"classification\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Classification).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ClothesProcessingModelResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeTryOnInternalPkgDomain22(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ClothesProcessingModelResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeTryOnInternalPkgDomain22(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ClothesProcessingModelResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeTryOnInternalPkgDomain22(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ClothesProcessingModelResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeTryOnInternalPkgDomain22(l, v)
}
func easyjson3e1fa5ecDecodeTryOnInternalPkgDomain23(in *jlexer.Lexer, out *ClothesClassificationResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.Type).UnmarshalText(data))
			}
		case "subtype":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.Subtype).UnmarshalText(data))
			}
		case "style":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.Style).UnmarshalText(data))
			}
		case "seasons":
			if in.IsNull() {
				in.Skip()
				out.Seasons = nil
			} else {
				in.Delim('[')
				if out.Seasons == nil {
					if !in.IsDelim(']') {
						out.Seasons = make([]Season, 0, 4)
					} else {
						out.Seasons = []Season{}
					}
				} else {
					out.Seasons = (out.Seasons)[:0]
				}
				for !in.IsDelim(']') {
					var v30 Season
					v30 = Season(in.String())
					out.Seasons = append(out.Seasons, v30)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "tags":
			if in.IsNull() {
				in.Skip()
				out.Tags = nil
			} else {
				in.Delim('[')
				if out.Tags == nil {
					if !in.IsDelim(']') {
						out.Tags = make([]string, 0, 4)
					} else {
						out.Tags = []string{}
					}
				} else {
					out.Tags = (out.Tags)[:0]
				}
				for !in.IsDelim(']') {
					var v31 string
					v31 = string(in.String())
					out.Tags = append(out.Tags, v31)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeTryOnInternalPkgDomain23(out *jwriter.Writer, in ClothesClassificationResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if (in.Type).IsDefined() {
		const prefix string = ",\"type\":"
		first = false
		out.RawString(prefix[1:])
		out.RawText((in.Type).MarshalText())
	}
	if (in.Subtype).IsDefined() {
		const prefix string = ",\"subtype\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.RawText((in.Subtype).MarshalText())
	}
	if (in.Style).IsDefined() {
		const prefix string = ",\"style\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.RawText((in.Style).MarshalText())
	}
	if len(in.Seasons) != 0 {
		const prefix string = ",\"seasons\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v32, v33 := range in.Seasons {
				if v32 > 0 {
					out.RawByte(',')
				}
				out.String(string(v33))
			}
			out.RawByte(']')
		}
	}
	if len(in.Tags) != 0 {
		const prefix string = ",\"tags\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v34, v35 := range in.Tags {
				if v34 > 0 {
					out.RawByte(',')
				}
				out.String(string(v35))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ClothesClassificationResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeTryOnInternalPkgDomain23(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ClothesClassificationResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeTryOnInternalPkgDomain23(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ClothesClassificationResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeTryOnInternalPkgDomain23(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ClothesClassificationResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeTryOnInternalPkgDomain23(l, v)
}
func easyjson3e1fa5ecDecodeTryOnInternalPkgDomain24(in *jlexer.Lexer, out *ClothesClassificationRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "tags":
			if in.IsNull() {
				in.Skip()
				out.Tags = nil
			} else {
				in.Delim('[')
				if out.Tags == nil {
					if !in.IsDelim(']') {
						out.Tags = make([]string, 0, 4)
					} else {
						out.Tags = []string{}
					}
				} else {
					out.Tags = (out.Tags)[:0]
				}
				for !in.IsDelim(']') {
					var v36 string
					v36 = string(in.String())
					out.Tags = append(out.Tags, v36)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "styles":
			if in.IsNull() {
				in.Skip()
				out.Styles = nil
			} else {
				in.Delim('[')
				if out.Styles == nil {
					if !in.IsDelim(']') {
						out.Styles = make([]string, 0, 4)
					} else {
						out.Styles = []string{}
					}
				} else {
					out.Styles = (out.Styles)[:0]
				}
				for !in.IsDelim(']') {
					var v37 string
					v37 = string(in.String())
					out.Styles = append(out.Styles, v37)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "categories":
			if in.IsNull() {
				in.Skip()
				out.Categories = nil
			} else {
				in.Delim('[')
				if out.Categories == nil {
					if !in.IsDelim(']') {
						out.Categories = make([]string, 0, 4)
					} else {
						out.Categories = []string{}
					}
				} else {
					out.Categories = (out.Categories)[:0]
				}
				for !in.IsDelim(']') {
					var v38 string
					v38 = string(in.String())
					out.Categories = append(out.Categories, v38)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "subcategories":
			if in.IsNull() {
				in.Skip()
				out.Subcategories = nil
			} else {
				in.Delim('[')
				if out.Subcategories == nil {
					if !in.IsDelim(']') {
						out.Subcategories = make([]string, 0, 4)
					} else {
						out.Subcategories = []string{}
					}
				} else {
					out.Subcategories = (out.Subcategories)[:0]
				}
				for !in.IsDelim(']') {
					var v39 string
					v39 = string(in.String())
					out.Subcategories = append(out.Subcategories, v39)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "seasons":
			if in.IsNull() {
				in.Skip()
				out.Seasons = nil
			} else {
				in.Delim('[')
				if out.Seasons == nil {
					if !in.IsDelim(']') {
						out.Seasons = make([]string, 0, 4)
					} else {
						out.Seasons = []string{}
					}
				} else {
					out.Seasons = (out.Seasons)[:0]
				}
				for !in.IsDelim(']') {
					var v40 string
					v40 = string(in.String())
					out.Seasons = append(out.Seasons, v40)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeTryOnInternalPkgDomain24(out *jwriter.Writer, in ClothesClassificationRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Tags) != 0 {
		const prefix string = ",\"tags\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v41, v42 := range in.Tags {
				if v41 > 0 {
					out.RawByte(',')
				}
				out.String(string(v42))
			}
			out.RawByte(']')
		}
	}
	if len(in.Styles) != 0 {
		const prefix string = ",\"styles\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v43, v44 := range in.Styles {
				if v43 > 0 {
					out.RawByte(',')
				}
				out.String(string(v44))
			}
			out.RawByte(']')
		}
	}
	if len(in.Categories) != 0 {
		const prefix string = ",\"categories\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v45, v46 := range in.Categories {
				if v45 > 0 {
					out.RawByte(',')
				}
				out.String(string(v46))
			}
			out.RawByte(']')
		}
	}
	if len(in.Subcategories) != 0 {
		const prefix string = ",\"subcategories\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v47, v48 := range in.Subcategories {
				if v47 > 0 {
					out.RawByte(',')
				}
				out.String(string(v48))
			}
			out.RawByte(']')
		}
	}
	if len(in.Seasons) != 0 {
		const prefix string = ",\"seasons\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v49, v50 := range in.Seasons {
				if v49 > 0 {
					out.RawByte(',')
				}
				out.String(string(v50))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ClothesClassificationRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeTryOnInternalPkgDomain24(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ClothesClassificationRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeTryOnInternalPkgDomain24(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ClothesClassificationRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeTryOnInternalPkgDomain24(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ClothesClassificationRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeTryOnInternalPkgDomain24(l, v)
}
func easyjson3e1fa5ecDecodeTryOnInternalPkgDomain25(in *jlexer.Lexer, out *ClothesClassificationModelResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "tags":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Tags = make(map[string]float32)
				} else {
					out.Tags = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v51 float32
					v51 = float32(in.Float32())
					(out.Tags)[key] = v51
					in.WantComma()
				}
				in.Delim('}')
			}
		case "categories":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Categories = make(map[string]float32)
				} else {
					out.Categories = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v52 float32
					v52 = float32(in.Float32())
					(out.Categories)[key] = v52
					in.WantComma()
				}
				in.Delim('}')
			}
		case "subcategories":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Subcategories = make(map[string]float32)
				} else {
					out.Subcategories = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v53 float32
					v53 = float32(in.Float32())
					(out.Subcategories)[key] = v53
					in.WantComma()
				}
				in.Delim('}')
			}
		case "seasons":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Seasons = make(map[string]float32)
				} else {
					out.Seasons = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v54 float32
					v54 = float32(in.Float32())
					(out.Seasons)[key] = v54
					in.WantComma()
				}
				in.Delim('}')
			}
		case "styles":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Styles = make(map[string]float32)
				} else {
					out.Styles = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v55 float32
					v55 = float32(in.Float32())
					(out.Styles)[key] = v55
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeTryOnInternalPkgDomain25(out *jwriter.Writer, in ClothesClassificationModelResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Tags) != 0 {
		const prefix string = ",\"tags\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('{')
			v56First := true
			for v56Name, v56Value := range in.Tags {
				if v56First {
					v56First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v56Name))
				out.RawByte(':')
				out.Float32(float32(v56Value))
			}
			out.RawByte('}')
		}
	}
	if len(in.Categories) != 0 {
		const prefix string = ",\"categories\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v57First := true
			for v57Name, v57Value := range in.Categories {
				if v57First {
					v57First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v57Name))
				out.RawByte(':')
				out.Float32(float32(v57Value))
			}
			out.RawByte('}')
		}
	}
	if len(in.Subcategories) != 0 {
		const prefix string = ",\"subcategories\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v58First := true
			for v58Name, v58Value := range in.Subcategories {
				if v58First {
					v58First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v58Name))
				out.RawByte(':')
				out.Float32(float32(v58Value))
			}
			out.RawByte('}')
		}
	}
	if len(in.Seasons) != 0 {
		const prefix string = ",\"seasons\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v59First := true
			for v59Name, v59Value := range in.Seasons {
				if v59First {
					v59First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v59Name))
				out.RawByte(':')
				out.Float32(float32(v59Value))
			}
			out.RawByte('}')
		}
	}
	if len(in.Styles) != 0 {
		const prefix string = ",\"styles\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v60First := true
			for v60Name, v60Value := range in.Styles {
				if v60First {
					v60First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v60Name))
				out.RawByte(':')
				out.Float32(float32(v60Value))
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ClothesClassificationModelResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeTryOnInternalPkgDomain25(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ClothesClassificationModelResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeTryOnInternalPkgDomain25(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ClothesClassificationModelResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeTryOnInternalPkgDomain25(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ClothesClassificationModelResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeTryOnInternalPkgDomain25(l, v)
}
func easyjson3e1fa5ecDecodeTryOnInternalPkgDomain26(in *jlexer.Lexer, out *Clothes) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "tryonable":
			out.Tryonable = bool(in.Bool())
		case "note":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.Note).UnmarshalText(data))
			}
		case "tags":
			if in.IsNull() {
				in.Skip()
				out.Tags = nil
			} else {
				in.Delim('[')
				if out.Tags == nil {
					if !in.IsDelim(']') {
						out.Tags = make([]string, 0, 4)
					} else {
						out.Tags = []string{}
					}
				} else {
					out.Tags = (out.Tags)[:0]
				}
				for !in.IsDelim(']') {
					var v61 string
					v61 = string(in.String())
					out.Tags = append(out.Tags, v61)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "user_id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.UserID).UnmarshalText(data))
			}
		case "image":
			out.Image = string(in.String())
		case "style_id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.StyleID).UnmarshalText(data))
			}
		case "type_id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.TypeID).UnmarshalText(data))
			}
		case "subtype_id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.SubtypeID).UnmarshalText(data))
			}
		case "color":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.Color).UnmarshalText(data))
			}
		case "seasons":
			if in.IsNull() {
				in.Skip()
				out.Seasons = nil
			} else {
				in.Delim('[')
				if out.Seasons == nil {
					if !in.IsDelim(']') {
						out.Seasons = make([]Season, 0, 4)
					} else {
						out.Seasons = []Season{}
					}
				} else {
					out.Seasons = (out.Seasons)[:0]
				}
				for !in.IsDelim(']') {
					var v62 Season
					v62 = Season(in.String())
					out.Seasons = append(out.Seasons, v62)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "uuid":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.ID).UnmarshalText(data))
			}
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "updated_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeTryOnInternalPkgDomain26(out *jwriter.Writer, in Clothes) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"tryonable\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Tryonable))
	}
	if (in.Note).IsDefined() {
		const prefix string = ",\"note\":"
		out.RawString(prefix)
		(in.Note).MarshalEasyJSON(out)
	}
	if len(in.Tags) != 0 {
		const prefix string = ",\"tags\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v63, v64 := range in.Tags {
				if v63 > 0 {
					out.RawByte(',')
				}
				out.String(string(v64))
			}
			out.RawByte(']')
		}
	}
	if (in.UserID).IsDefined() {
		const prefix string = ",\"user_id\":"
		out.RawString(prefix)
		out.RawText((in.UserID).MarshalText())
	}
	if in.Image != "" {
		const prefix string = ",\"image\":"
		out.RawString(prefix)
		out.String(string(in.Image))
	}
	if (in.StyleID).IsDefined() {
		const prefix string = ",\"style_id\":"
		out.RawString(prefix)
		out.RawText((in.StyleID).MarshalText())
	}
	if (in.TypeID).IsDefined() {
		const prefix string = ",\"type_id\":"
		out.RawString(prefix)
		out.RawText((in.TypeID).MarshalText())
	}
	if (in.SubtypeID).IsDefined() {
		const prefix string = ",\"subtype_id\":"
		out.RawString(prefix)
		out.RawText((in.SubtypeID).MarshalText())
	}
	if (in.Color).IsDefined() {
		const prefix string = ",\"color\":"
		out.RawString(prefix)
		(in.Color).MarshalEasyJSON(out)
	}
	if len(in.Seasons) != 0 {
		const prefix string = ",\"seasons\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v65, v66 := range in.Seasons {
				if v65 > 0 {
					out.RawByte(',')
				}
				out.String(string(v66))
			}
			out.RawByte(']')
		}
	}
	if (in.ID).IsDefined() {
		const prefix string = ",\"uuid\":"
		out.RawString(prefix)
		out.RawText((in.ID).MarshalText())
	}
	if (in.CreatedAt).IsDefined() {
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	if (in.UpdatedAt).IsDefined() {
		const prefix string = ",\"updated_at\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Clothes) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeTryOnInternalPkgDomain26(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Clothes) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeTryOnInternalPkgDomain26(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Clothes) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeTryOnInternalPkgDomain26(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Clothes) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeTryOnInternalPkgDomain26(l, v)
}
