// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package try_on

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	utils "try-on/internal/pkg/utils"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson569002f9DecodeTryOnInternalPkgDeliveryTryOn(in *jlexer.Lexer, out *tryOnRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "clothes_id":
			if in.IsNull() {
				in.Skip()
				out.ClothesID = nil
			} else {
				in.Delim('[')
				if out.ClothesID == nil {
					if !in.IsDelim(']') {
						out.ClothesID = make([]utils.UUID, 0, 4)
					} else {
						out.ClothesID = []utils.UUID{}
					}
				} else {
					out.ClothesID = (out.ClothesID)[:0]
				}
				for !in.IsDelim(']') {
					var v1 utils.UUID
					if data := in.UnsafeBytes(); in.Ok() {
						in.AddError((v1).UnmarshalText(data))
					}
					out.ClothesID = append(out.ClothesID, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "user_image_id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.UserImageID).UnmarshalText(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson569002f9EncodeTryOnInternalPkgDeliveryTryOn(out *jwriter.Writer, in tryOnRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.ClothesID) != 0 {
		const prefix string = ",\"clothes_id\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v2, v3 := range in.ClothesID {
				if v2 > 0 {
					out.RawByte(',')
				}
				out.RawText((v3).MarshalText())
			}
			out.RawByte(']')
		}
	}
	if (in.UserImageID).IsDefined() {
		const prefix string = ",\"user_image_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.RawText((in.UserImageID).MarshalText())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v tryOnRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson569002f9EncodeTryOnInternalPkgDeliveryTryOn(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v tryOnRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson569002f9EncodeTryOnInternalPkgDeliveryTryOn(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *tryOnRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson569002f9DecodeTryOnInternalPkgDeliveryTryOn(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *tryOnRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson569002f9DecodeTryOnInternalPkgDeliveryTryOn(l, v)
}
func easyjson569002f9DecodeTryOnInternalPkgDeliveryTryOn1(in *jlexer.Lexer, out *tryOnPostRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "outfit_id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.OutfitID).UnmarshalText(data))
			}
		case "user_image_id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.UserImageID).UnmarshalText(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson569002f9EncodeTryOnInternalPkgDeliveryTryOn1(out *jwriter.Writer, in tryOnPostRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if (in.OutfitID).IsDefined() {
		const prefix string = ",\"outfit_id\":"
		first = false
		out.RawString(prefix[1:])
		out.RawText((in.OutfitID).MarshalText())
	}
	if (in.UserImageID).IsDefined() {
		const prefix string = ",\"user_image_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.RawText((in.UserImageID).MarshalText())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v tryOnPostRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson569002f9EncodeTryOnInternalPkgDeliveryTryOn1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v tryOnPostRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson569002f9EncodeTryOnInternalPkgDeliveryTryOn1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *tryOnPostRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson569002f9DecodeTryOnInternalPkgDeliveryTryOn1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *tryOnPostRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson569002f9DecodeTryOnInternalPkgDeliveryTryOn1(l, v)
}
func easyjson569002f9DecodeTryOnInternalPkgDeliveryTryOn2(in *jlexer.Lexer, out *tryOnOutfitRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "outfit_id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.OutfitID).UnmarshalText(data))
			}
		case "user_image_id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.UserImageID).UnmarshalText(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson569002f9EncodeTryOnInternalPkgDeliveryTryOn2(out *jwriter.Writer, in tryOnOutfitRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if (in.OutfitID).IsDefined() {
		const prefix string = ",\"outfit_id\":"
		first = false
		out.RawString(prefix[1:])
		out.RawText((in.OutfitID).MarshalText())
	}
	if (in.UserImageID).IsDefined() {
		const prefix string = ",\"user_image_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.RawText((in.UserImageID).MarshalText())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v tryOnOutfitRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson569002f9EncodeTryOnInternalPkgDeliveryTryOn2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v tryOnOutfitRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson569002f9EncodeTryOnInternalPkgDeliveryTryOn2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *tryOnOutfitRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson569002f9DecodeTryOnInternalPkgDeliveryTryOn2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *tryOnOutfitRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson569002f9DecodeTryOnInternalPkgDeliveryTryOn2(l, v)
}
func easyjson569002f9DecodeTryOnInternalPkgDeliveryTryOn3(in *jlexer.Lexer, out *ratingRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "rating":
			out.Rating = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson569002f9EncodeTryOnInternalPkgDeliveryTryOn3(out *jwriter.Writer, in ratingRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Rating != 0 {
		const prefix string = ",\"rating\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.Rating))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ratingRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson569002f9EncodeTryOnInternalPkgDeliveryTryOn3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ratingRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson569002f9EncodeTryOnInternalPkgDeliveryTryOn3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ratingRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson569002f9DecodeTryOnInternalPkgDeliveryTryOn3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ratingRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson569002f9DecodeTryOnInternalPkgDeliveryTryOn3(l, v)
}
