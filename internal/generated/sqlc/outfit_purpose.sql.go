// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: outfit_purpose.sql

package sqlc

import (
	"context"
)

const getOutfitPurposeByEngName = `-- name: GetOutfitPurposeByEngName :many
select id, name, eng_name, created_at, updated_at
from outfit_purpose
where eng_name = any($1::text[])
`

func (q *Queries) GetOutfitPurposeByEngName(ctx context.Context, engNames []string) ([]OutfitPurpose, error) {
	rows, err := q.db.Query(ctx, getOutfitPurposeByEngName, engNames)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OutfitPurpose
	for rows.Next() {
		var i OutfitPurpose
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.EngName,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOutfitPurposeEngNames = `-- name: GetOutfitPurposeEngNames :many
select eng_name
from outfit_purpose
where name = any($1::text[])
`

func (q *Queries) GetOutfitPurposeEngNames(ctx context.Context, engNames []string) ([]string, error) {
	rows, err := q.db.Query(ctx, getOutfitPurposeEngNames, engNames)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var eng_name string
		if err := rows.Scan(&eng_name); err != nil {
			return nil, err
		}
		items = append(items, eng_name)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOutfitPurposes = `-- name: GetOutfitPurposes :many
select id, name, eng_name, created_at, updated_at
from outfit_purpose
`

func (q *Queries) GetOutfitPurposes(ctx context.Context) ([]OutfitPurpose, error) {
	rows, err := q.db.Query(ctx, getOutfitPurposes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OutfitPurpose
	for rows.Next() {
		var i OutfitPurpose
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.EngName,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
