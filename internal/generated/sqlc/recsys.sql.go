// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: recsys.sql

package sqlc

import (
	"context"

	"try-on/internal/pkg/utils"
)

const getClothesTensors = `-- name: GetClothesTensors :many
select
    outfits.id as outfit_id,
    outfits.user_id,
    array_agg(cv.clothes_id)::uuid[] as clothes_id,
    array_agg(cv.tensor)::bytea[] as clothes_tensor
from outfits
join clothes_vector cv on outfits.transforms ? cv.clothes_id::text
where outfits.privacy = 'public'
group by
    outfits.id,
    outfits.user_id
`

type GetClothesTensorsRow struct {
	OutfitID      utils.UUID
	UserID        utils.UUID
	ClothesID     []utils.UUID
	ClothesTensor [][]byte
}

func (q *Queries) GetClothesTensors(ctx context.Context) ([]GetClothesTensorsRow, error) {
	rows, err := q.db.Query(ctx, getClothesTensors)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetClothesTensorsRow
	for rows.Next() {
		var i GetClothesTensorsRow
		if err := rows.Scan(
			&i.OutfitID,
			&i.UserID,
			&i.ClothesID,
			&i.ClothesTensor,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
