// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: user_images.sql

package sqlc

import (
	"context"

	"try-on/internal/pkg/utils"
)

const createUserImage = `-- name: CreateUserImage :one
insert into user_images(user_id, image)
values ($1, $2)
returning id
`

func (q *Queries) CreateUserImage(ctx context.Context, userID utils.UUID, image string) (utils.UUID, error) {
	row := q.db.QueryRow(ctx, createUserImage, userID, image)
	var id utils.UUID
	err := row.Scan(&id)
	return id, err
}

const deleteUserImage = `-- name: DeleteUserImage :exec
delete from user_images
where id = $1
`

func (q *Queries) DeleteUserImage(ctx context.Context, id utils.UUID) error {
	_, err := q.db.Exec(ctx, deleteUserImage, id)
	return err
}

const getUserImageByID = `-- name: GetUserImageByID :one
select id, created_at, updated_at, user_id, image from user_images
where id = $1
`

func (q *Queries) GetUserImageByID(ctx context.Context, id utils.UUID) (UserImage, error) {
	row := q.db.QueryRow(ctx, getUserImageByID, id)
	var i UserImage
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.Image,
	)
	return i, err
}

const getUserImageByUser = `-- name: GetUserImageByUser :many
select id, created_at, updated_at, user_id, image from user_images
where user_id = $1
order by created_at desc
`

func (q *Queries) GetUserImageByUser(ctx context.Context, userID utils.UUID) ([]UserImage, error) {
	rows, err := q.db.Query(ctx, getUserImageByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserImage
	for rows.Next() {
		var i UserImage
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
			&i.Image,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setUserImageUrl = `-- name: SetUserImageUrl :exec
update user_images
set image = $2,
    updated_at = now()
where id = $1
`

func (q *Queries) SetUserImageUrl(ctx context.Context, iD utils.UUID, image string) error {
	_, err := q.db.Exec(ctx, setUserImageUrl, iD, image)
	return err
}
