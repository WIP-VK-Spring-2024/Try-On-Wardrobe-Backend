// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: outfits.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
	"try-on/internal/pkg/domain"
	"try-on/internal/pkg/utils"
)

const createOutfit = `-- name: CreateOutfit :one
insert into outfits(
    user_id,
    transforms
) values ($1, $2)
returning id
`

func (q *Queries) CreateOutfit(ctx context.Context, userID utils.UUID, transforms []byte) (utils.UUID, error) {
	row := q.db.QueryRow(ctx, createOutfit, userID, transforms)
	var id utils.UUID
	err := row.Scan(&id)
	return id, err
}

const deleteOutfit = `-- name: DeleteOutfit :exec
delete from outfits
where id = $1
`

func (q *Queries) DeleteOutfit(ctx context.Context, id utils.UUID) error {
	_, err := q.db.Exec(ctx, deleteOutfit, id)
	return err
}

const getOutfit = `-- name: GetOutfit :one
select id, user_id, style_id, created_at, updated_at, name, note, image, transforms, seasons
from outfits
where id = $1
`

func (q *Queries) GetOutfit(ctx context.Context, id utils.UUID) (Outfit, error) {
	row := q.db.QueryRow(ctx, getOutfit, id)
	var i Outfit
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.StyleID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Note,
		&i.Image,
		&i.Transforms,
		&i.Seasons,
	)
	return i, err
}

const getOutfitsByUser = `-- name: GetOutfitsByUser :many
select id, user_id, style_id, created_at, updated_at, name, note, image, transforms, seasons
from outfits
where user_id = $1
`

func (q *Queries) GetOutfitsByUser(ctx context.Context, userID utils.UUID) ([]Outfit, error) {
	rows, err := q.db.Query(ctx, getOutfitsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Outfit
	for rows.Next() {
		var i Outfit
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.StyleID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Note,
			&i.Image,
			&i.Transforms,
			&i.Seasons,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setOutfitImage = `-- name: SetOutfitImage :exec
update outfits
set image = $2
where id = $1
`

func (q *Queries) SetOutfitImage(ctx context.Context, iD utils.UUID, image pgtype.Text) error {
	_, err := q.db.Exec(ctx, setOutfitImage, iD, image)
	return err
}

const updateOutfit = `-- name: UpdateOutfit :exec
update outfits
set name = coalesce($2, name),
    note = coalesce($3, note),
    style_id = coalesce($4, style_id),
    transforms = coalesce($5, transforms),
    seasons = coalesce($6, seasons)::season[],
    updated_at = now()
where id = $1
`

type UpdateOutfitParams struct {
	ID         utils.UUID
	Name       pgtype.Text
	Note       pgtype.Text
	StyleID    utils.UUID
	Transforms []byte
	Seasons    []domain.Season
}

func (q *Queries) UpdateOutfit(ctx context.Context, arg UpdateOutfitParams) error {
	_, err := q.db.Exec(ctx, updateOutfit,
		arg.ID,
		arg.Name,
		arg.Note,
		arg.StyleID,
		arg.Transforms,
		arg.Seasons,
	)
	return err
}
