// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package sqlc

import (
	"context"
)

const getSubtypes = `-- name: GetSubtypes :many
SELECT id, created_at, updated_at, name, type_id FROM subtypes
`

func (q *Queries) GetSubtypes(ctx context.Context) ([]Subtype, error) {
	rows, err := q.db.QueryContext(ctx, getSubtypes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Subtype
	for rows.Next() {
		var i Subtype
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.TypeID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTypes = `-- name: GetTypes :many
SELECT id, created_at, updated_at, name FROM types
`

func (q *Queries) GetTypes(ctx context.Context) ([]Type, error) {
	rows, err := q.db.QueryContext(ctx, getTypes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Type
	for rows.Next() {
		var i Type
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
