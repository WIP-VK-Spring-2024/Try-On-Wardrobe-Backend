// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: users.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
	"try-on/internal/pkg/utils"
)

const createUser = `-- name: CreateUser :one
insert into users(
    name,
    email,
    password
) values ($1, $2, $3)
returning id
`

type CreateUserParams struct {
	Name     string
	Email    pgtype.Text
	Password string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (utils.UUID, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Name, arg.Email, arg.Password)
	var id utils.UUID
	err := row.Scan(&id)
	return id, err
}

const getUserByID = `-- name: GetUserByID :one
select id, created_at, updated_at, name, email, password, gender, privacy from users
where id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id utils.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.Gender,
		&i.Privacy,
	)
	return i, err
}

const getUserByName = `-- name: GetUserByName :one
select id, created_at, updated_at, name, email, password, gender, privacy from users
where name = $1
`

func (q *Queries) GetUserByName(ctx context.Context, name string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByName, name)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.Gender,
		&i.Privacy,
	)
	return i, err
}

const getUsersForOutfitGeneration = `-- name: GetUsersForOutfitGeneration :many
select users.id, users.created_at, users.updated_at, users.name, users.email, users.password, users.gender, users.privacy
from users
where not exists (
    select 1 from outfits
    where user_id = users.id
    and viewed = false
)
`

func (q *Queries) GetUsersForOutfitGeneration(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, getUsersForOutfitGeneration)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Email,
			&i.Password,
			&i.Gender,
			&i.Privacy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
